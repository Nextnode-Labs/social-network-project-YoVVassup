{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Post","className","s","item","image","userPhoto","size","message","likescount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","textarea","name","component","Textarea","placeholder","validate","required","label","onClick","MyPosts","memo","postsElements","posts","reverse","map","p","key","id","createRef","postsBlock","values","addPost","newPostText","MyPostsContainer","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","profile","error","style","formSummaryError","createField","Input","type","Object","keys","contacts","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","photos","large","mainPhoto","target","files","length","initialValues","formData","then","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.0fccccb8.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__2cXY9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3Cf9B\",\"posts\":\"MyPosts_posts__2dmwH\",\"textarea\":\"MyPosts_textarea__2vDok\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2hpOq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageprofile\":\"ProfileInfo_imageprofile__11Zr2\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3P19D\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3NNkr\"};","import React from 'react'\r\nimport s from './Post.module.css'\r\nimport userPhoto from '../../../../assets/images/user.png';\r\nimport {Avatar} from 'primereact/avatar';\r\n\r\n\r\nconst Post = (props) => {\r\n\r\n    return (\r\n        <div className={`${s.item}` + ' p-2'}>\r\n            <div>\r\n                <Avatar image={userPhoto} size='large'/>\r\n                <span className={'m-2'}>{props.message}</span>\r\n            </div>\r\n            <div className={''}>\r\n                <span>like</span> {props.likescount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, {useRef} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormControls/FormsControls\";\r\nimport {Button} from \"primereact/button\";\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field className={s.textarea} name={'newPostText'} component={Textarea}\r\n                   placeholder={'Post message...'} validate={[required, maxLength10]}/>\r\n            {/*<InputTextarea className={'m-2'} name={'newPostText'} rows={2} cols={62}*/}\r\n            {/*               value={props.value} ref={props.ref}*/}\r\n            {/*               onChange={props.onChange} autoResize/>*/}\r\n        </div>\r\n        <div>\r\n            <Button label='Add post' onClick={props.onClick}\r\n                    className='p-button-secondary m-1 p-1'/>\r\n        </div>\r\n    </form>;\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElements =\r\n        [...props.posts]\r\n            .reverse()\r\n            .map(p => <Post message={p.message} likescount={p.likescount} key={p.id}/>);\r\n    let newPostElement = React.createRef();\r\n    // let newPostElement = useRef(null);\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div className={'px-6 shadow-8'}>MY POSTS</div>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from '../../../redux/profile-reduсer';\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useEffect, useState} from \"react\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false );\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { !editMode &&\r\n            <div>\r\n                <b>Status: </b><span onDoubleClick={activateEditMode}>{props.status || '----'}</span>\r\n            </div>\r\n            }\r\n            { editMode &&\r\n            <div>\r\n                <input onChange={onStatusChange} autoFocus={true}\r\n                       onBlur={deactivateEditMode} value={status} />\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../Common/FormControls/FormsControls\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport style from \"../../Common/FormControls/FormsControls.module.css\";\r\nimport {Button} from \"primereact/button\";\r\n\r\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\r\n    return  <form onSubmit={handleSubmit}>\r\n        <div><Button label='save' className='p-button-secondary m-1 p-1'/></div>\r\n        {error && <div className={style.formSummaryError}>\r\n            {error}\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>:\r\n            {createField('Full name', 'fullName', [], Input)}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>:\r\n            {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n        </div>\r\n        <div>\r\n            <b>My professional skills</b>:\r\n            {createField('My professional skills...', 'lookingForAJobDescription', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>About me</b>:\r\n            {createField('About me...', 'aboutMe', [], Textarea)}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <div key={key}>\r\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n            </div>\r\n        })}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({form: 'edit-profile'})(ProfileDataForm);\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {useState} from 'react'\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport {Avatar} from 'primereact/avatar';\r\nimport ProfileDataForm from \"./ProfileDataForm\";\r\nimport {Button} from \"primereact/button\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e) => {\r\n        if (e.target.files.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData) => {\r\n        saveProfile(formData).then(\r\n            () => {\r\n                setEditMode(false)\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <Avatar image={profile.photos.large || userPhoto} className={s.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={profile} isOwner={isOwner}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileData = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <Button label='edit' onClick={goToEditMode} className='p-button-secondary m-1 p-1'/>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}) => {\r\n    return <div className={'ml-3'}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import s from './Profile.module.css'\r\nimport React from 'react'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={s.profile}>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                         isOwner={props.isOwner}\r\n                         profile={props.profile}\r\n                         status={props.status}\r\n                         saveProfile={props.saveProfile}\r\n                         updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer profile={props.profile}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react'\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reduсer';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter)(ProfileContainer);\r\n\r\n//withAuthRedirect\r\n"],"sourceRoot":""}